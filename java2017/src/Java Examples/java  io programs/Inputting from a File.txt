Inputting from a File
A file is opened for input by creating a FileInputStream object. Here is its most commonly
used constructor.
FileInputStream(String fileName) throws FileNotFoundException
Here, fileName specifies the name of the file you want to open. If the file does not exist, then
FileNotFoundException is thrown.
To read from a file, you can use read( ). The version that we will use is shown here:
int read( ) throws IOException
Each time it is called, read( ) reads a single byte from the file and returns it as an integer
value. It returns –1 when the end of the file is encountered. It throws an IOException when an
error occurs. Thus, this version of read( ) is the same as the one used to read from the console.
When you are done with a file, you should close it by calling close( ). Its general form is
shown here.
void close( ) throws IOException
Closing a file releases the system resources allocated to the file, allowing them to be used by
another file.
The following program uses read( ) to input and display the contents of a text file, the
name of which is specified as a command-line argument. Note the try/catch blocks that handle
the two errors that might occur when this program is used—the specified file not being found
or the user forgetting to include the name of the file. You can use this same approach any time
you use command-line arguments.